import pandas as pd

from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

# Path of the file to be read
iowa_file_path = '../input/home-data-for-ml-course/train.csv'

home_data = pd.read_csv(iowa_file_path)
home_data.describe()
# Create the list of features below
feature_names =["LotArea","YearBuilt","1stFlrSF","2ndFlrSF","FullBath","BedroomAbvGr","TotRmsAbvGrd"]


X =home_data[feature_names]
print(home_data.describe())


print(home_data.head())



iowa_model = DecisionTreeRegressor(random_state=1)


print(iowa_model.fit(X,y))
predictions = iowa_model.predict(X)
print(predictions)
print("Predictions were:",prediction)
print("Actual prices were:\n",y.head())


train_X, val_X, train_y, val_y = train_test_split(X,y,random_state=1)

iowa_model = DecisionTreeRegressor(random_state=1)

iowa_model.fit(train_X,train_y)
val_predictions = iowa_model.predict(val_X)
print(iowa_model.predict(val_X.head()))
from sklearn.metrics import mean_absolute_error
val_mae = mean_absolute_error(val_y,val_predictions)
print(val_mae)

def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):
    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(train_X, train_y)
    preds_val = model.predict(val_X)
    mae = mean_absolute_error(val_y, preds_val)
    return(mae)

candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500]


l={}

for i in candidate_max_leaf_nodes:
    mae_x=get_mae(i,train_X,val_X,train_y,val_y)
    l[i]=mae_x

best_tree_size=min(l,key=l.get)
final_model = DecisionTreeRegressor(max_leaf_nodes=best_tree_size,random_state=1)

final_model.fit(X,y)
print(mean_absolute_error(val_y,pred))
    
rf_model=RandomForestRegressor(random_state=1)


rf_model.fit(train_X,train_y)

    
pred=rf_model.predict(val_X)
rf_val_mae =mean_absolute_error(val_y,pred)
